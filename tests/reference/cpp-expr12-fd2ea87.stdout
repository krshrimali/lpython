#include <iostream>
#include <string>
#include <vector>
#include <cassert>
#include <cmath>
#include <complex>
#include <Kokkos_Core.hpp>
#include <lfortran_intrinsics.h>

template <typename T>
Kokkos::View<T*> from_std_vector(const std::vector<T> &v)
{
    Kokkos::View<T*> r("r", v.size());
    for (size_t i=0; i < v.size(); i++) {
        r(i) = v[i];
    }
    return r;
}


struct dimension_descriptor
{
    int32_t lower_bound, length;
};
// Forward declarations
void _lpython_main_program();
int32_t check();
void main0();
int32_t test(int a, int b);
namespace {
}

// Implementations
void _lpython_main_program()
{
    main0();
}

int32_t check()
{
    int _lpython_return_variable;
    int a;
    a = test(2, 2);
    _lpython_return_variable = a;
    return _lpython_return_variable;
}

void main0()
{
    int x;
    x = check();
}

int32_t test(int a, int b)
{
    int _lpython_return_variable;
    _lpython_return_variable = std::pow(a, b);
    return _lpython_return_variable;
}

namespace {

void main2() {
    _lpython_main_program();
}

}
int main(int argc, char* argv[])
{
    Kokkos::initialize(argc, argv);
    main2();
    Kokkos::finalize();
    return 0;
}
